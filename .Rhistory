find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
q()
f <- function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
x<-5
y<- if(x<3){
NA
} else {
10
}
y
if (x>5){
x<-0
}
x
x<-1:10
if (x>5){
x<-0
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
test <- rnorm(20)
test
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(test)
m
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(test)
cachemean(makeVector,test)
cachemean(makeVector(test))
n <- NULL
n
class(n)
testset <- function(y){ }
testset2 <- function(y){ x<<- y m<<- NULL }
testMake <- function(x=numeric()){ set <- function(y) {x<<-y m<<-NULL} set}
testMake <- function(x=numeric()){ set <- function(y) {x<<-y} set}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
print (set, get, setmean, getmean)
}
a <- rnorm(20)
makeVector(a)
> makeVector2 <- function(x = numeric()) {
+     m <- NULL
+     set <- function(y) {
+         x <<- y
+         m <<- NULL
+     }
+     get <- function() x
+     setmean <- function(mean) m <<- mean
+     getmean <- function() m
+     list(set = set, get = get,
+          setmean = setmean,
+          getmean = getmean)
+     print (set), get, setmean, getmean)
+ }
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(a)
a<- rnorm(10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(a)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(a))
cachemean(makeVector(1:10))
testa <- makeVector(2:20)
cachemean(testa)
class(testa)
b <- rnorm(2000)
makeVector(b)
cachemean(makeVector(b))
cachemean(makeVector(5:3000))
setwd("~/R")
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y){
x <<- y
invm <<- NULL
}
get <- function(x)
setInv <- function(solve) invm <<- solve
getInv <- function () invm
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
m <- matrix(rnorm(10),2,3)
m <- matrix(rnorm(10),2,5)
makeCacheMatrix(m)
testInv <- function(solve(m))
testInv <- solve(m)
newm <- matrix (rnorm(16),4,4)
testInv <- solve(newm)
newm
testInv
makeCacheMatrix(newm)
makeCacheMatrix(newm)
mean(newm)
mm <- matrix()
mm
mmm <- matrix(,)
mmm
makeCacheMatrix(newm)
makeCacheMatrix(newm)
m <- matrix(rnorm(25), 5,5)
makeCacheMatrix(m)
setwd("~/R/ProgrammingAssignment2")
setwd("~/R/ProgrammingAssignment2")
makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y){
x <<- y
invm <<- NULL
}
get <- function(x)
setInv <- function(inverse) invm <<- inverse
getInv <- function() invm
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
makeCacheMatrix(m)
inverse(m)
makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y){
x <<- y
invm <<- NULL
}
get <- function(x)
setInv <- function(solve) invm <<- solve
getInv <- function() invm
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
makeCacheMatrix(m)
a <- NULL
aa = NULL
class(a)
class(aa)
a<- NA
a
class(a)
b <- NAN
b <- NaN
class(b)
makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y){
x <<- y
invm <<- NULL
}
get <- function() x
setInv <- function(solve) invm <<- solve
getInv <- function() invm
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
m <- matrix(rnorm(16),4,4)
makeCacheMatrix(m)
n <- matrix(rnorm(10), 2,5)
makeCacheMatrix(n)
View(n)
solve(m)
solve(n)
inverse(n)
inverse.gaussian(n)
cacheSolve <- function(x, ...) {
invm <- x$getInv()
if(!is.null(invm)){
message ("getting cached data")
return (invm)
}
data <- x$get()
invm <- solve(data,...)
x$setInv(invm)
invm
}
cacheSolve(makeCacheMatrix(m))
cacheSolve(makeCacheMatrix(n))
m
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y){
x <<- y
invm <<- NULL
}
get <- function() x
setInv <- function(solve) invm <<- solve
getInv <- function() invm
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
cacheSolve <- function(x, ...) {
invm <- x$getInv()
if(!is.null(invm)){
message ("getting cached data")
return (invm)
}
data <- x$get()
invm <- solve(data,...)
x$setInv(invm)
invm
}
m <- matrix(rnorm(25),5,5)
n <- matrix(rnorm(30),5,6)
cacheSolve(makeCacheMatrix(m))
cacheSolve(makeCacheMatrix(n))
